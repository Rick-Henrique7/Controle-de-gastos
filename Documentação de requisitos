# 1. Descri√ß√£o Geral

O sistema ser√° uma **aplica√ß√£o web para controle financeiro pessoal**, permitindo que o usu√°rio cadastre suas despesas e receitas, categorize-as e visualize relat√≥rios financeiros mensais.  
O objetivo √© oferecer uma forma **simples e intuitiva** de gerenciar o or√ßamento.

---

# 2. Requisitos Funcionais (RF)

## üîπ Cadastro e Gerenciamento de Movimenta√ß√µes

- **RF01:** O sistema deve permitir cadastrar despesas com: valor, descri√ß√£o, data e categoria.
- **RF02:** O sistema deve permitir cadastrar receitas com: valor, descri√ß√£o, data e categoria.
- **RF03:** O sistema deve permitir editar e excluir movimenta√ß√µes cadastradas.
- **RF04:** O sistema deve permitir filtrar movimenta√ß√µes por per√≠odo (ex: m√™s/ano) e categoria.

## üîπ Categorias e Organiza√ß√£o

- **RF05:** O sistema deve disponibilizar categorias padr√£o (ex: Alimenta√ß√£o, Transporte, Lazer, Sa√∫de, Educa√ß√£o).
- **RF06:** O sistema deve permitir ao usu√°rio criar suas pr√≥prias categorias.

## üîπ Relat√≥rios e Dashboard

- **RF07:** O sistema deve gerar um relat√≥rio mensal com total de receitas, despesas e saldo.
- **RF08:** O sistema deve exibir gr√°ficos de distribui√ß√£o de gastos por categoria (ex: pizza, barras).
- **RF09:** O sistema deve permitir exportar relat√≥rios em PDF.

## üîπ Usu√°rios (futuro opcional)

- **RF10:** O sistema poder√° permitir cadastro de usu√°rios com login, para salvar dados individualmente (pode ser implementado em vers√£o 2).

---

# 3. Requisitos N√£o Funcionais (RNF)

- **RNF01:** O sistema deve ser responsivo (acess√≠vel em computador e celular).
- **RNF02:** O sistema deve ter interface simples e intuitiva.
- **RNF03:** O sistema deve utilizar Flask (Python) para o backend.
- **RNF04:** O banco de dados deve ser SQLite (para vers√£o inicial) e possibilitar migra√ß√£o para PostgreSQL.
- **RNF05:** O sistema deve seguir boas pr√°ticas de seguran√ßa b√°sica (valida√ß√£o de dados e preven√ß√£o de SQL Injection).
- **RNF06:** O sistema deve estar dispon√≠vel para deploy em Render/Heroku/Railway.

---

# 4. Requisitos de Qualidade

- O tempo de resposta das p√°ginas deve ser **inferior a 3 segundos** em rede padr√£o.
- O sistema deve suportar **at√© 1.000 registros de movimenta√ß√µes** sem perda significativa de desempenho.

---

# 5. Casos de Uso (simplificados)

- **Cadastrar uma despesa:**  
  O usu√°rio informa valor, data, descri√ß√£o e categoria. O sistema salva no banco.

- **Visualizar relat√≥rios:**  
  O usu√°rio seleciona um m√™s e o sistema mostra receitas, despesas, saldo e gr√°ficos.

- **Exportar relat√≥rio:**  
  O usu√°rio clica em "Exportar PDF" e o sistema gera
<div align="center">
<img src="https://github.com/user-attachments/assets/08d81c8d-65c7-4193-a1d6-956e80b74cc0" width="400px" />
</div>
